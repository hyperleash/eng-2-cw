- name: Install pip and python
  dnf:
    name: 
          - python3
          - python3-pip
          - git

- name: Create virtual environment directory
  ansible.builtin.file:
    path: /home/ec2-user/data/celery_venv
    state: directory
    owner: ec2-user
    group: ec2-user

- name: Create a Python virtual environment
  shell: python -m venv /home/ec2-user/data/celery_venv

- name: Activate the virtual environment
  shell: source /home/ec2-user/data/celery_venv/bin/activate

- name: Install Celery
  shell: /home/ec2-user/data/celery_venv/bin/pip install celery[redis]

- name: Disable SELinux temporarily (otherwise can't start celery service)
  shell: setenforce 0

- name: remove celery service 
  ansible.builtin.file:
    path: /etc/systemd/system/celery.service
    state: absent

- name: check if celery service exists
  ansible.builtin.stat:
    path: /etc/systemd/system/celery.service
  register: celery_service

- name: Ensure directory exists
  ansible.builtin.file:
    path: /home/ec2-user/data/shared/celery_logs
    state: directory
    mode: '0755'
    owner: ec2-user  
    group: ec2-user

- name: Create celery.service (standard worker)
  ansible.builtin.copy:
    dest: celery.service
    content: |
      [Unit]
      Description=Celery Service
      After=network.target

      [Service]
      User=ec2-user
      Group=ec2-user
      
      Type=forking
      
      WorkingDirectory=/home/ec2-user/data/shared
      ExecStart=/usr/local/bin/celery_env -A tasks worker -Q pdb_queue,celery -c 1 --pidfile=celery_logs/celery_service_{{ ansible_hostname }}.pid --logfile=celery_logs/celery_service_{{ ansible_hostname }}.log --loglevel="INFO" --prefetch-multiplier=1 -D
      ExecStop=/usr/local/bin/celery_env multi stop_verify worker --pidfile=celery_logs/celery_service_{{ ansible_hostname }}.pid --logfile=celery_logs/celery_service_{{ ansible_hostname }}.log --loglevel="INFO"
      ExecReload=/usr/local/bin/celery_env -A tasks multi restart worker -Q pdb_queue,celery -c 1 --pidfile=celery_logs/celery_service_{{ ansible_hostname }}.pid --logfile=celery_logs/celery_service_{{ ansible_hostname }}.log --loglevel="INFO" --prefetch-multiplier=1 -D
      RemainAfterExit=yes

      [Install]
      WantedBy=multi-user.target
  when: 
    - celery_service.stat.exists == False
    - "'cluster' in group_names"
  
- name: Create celery.service (high resource worker)
  ansible.builtin.copy:
    dest: celery.service
    content: |
      [Unit]
      Description=Celery Service
      After=network.target

      [Service]
      User=ec2-user
      Group=ec2-user
      
      Type=forking
      
      WorkingDirectory=/home/ec2-user/data/shared
      ExecStart=/usr/local/bin/celery_env -A tasks worker -Q merizo_queue,celery -c 1 --pidfile=celery_logs/celery_service_{{ ansible_hostname }}.pid --logfile=celery_logs/celery_service_{{ ansible_hostname }}.log --loglevel="INFO" --prefetch-multiplier=1 -D
      ExecStop=/usr/local/bin/celery_env multi stop_verify worker --pidfile=celery_logs/celery_service_{{ ansible_hostname }}.pid --logfile=celery_logs/celery_service_{{ ansible_hostname }}.log --loglevel="INFO"
      ExecReload=/usr/local/bin/celery_env -A tasks multi restart worker -Q merizo_queue,celery -c 1 --pidfile=celery_logs/celery_service_{{ ansible_hostname }}.pid --logfile=celery_logs/celery_service_{{ ansible_hostname }}.log --loglevel="INFO" --prefetch-multiplier=1 -D
      RemainAfterExit=yes

      [Install]
      WantedBy=multi-user.target
  when: 
    - celery_service.stat.exists == False
    - "'client' in group_names"

- name: move celery service
  ansible.builtin.copy:
      src:  celery.service
      dest: /etc/systemd/system/celery.service
      remote_src: yes
      owner: root
      group: root

- name: move celery binary
  ansible.builtin.copy:
      src:  /home/ec2-user/data/celery_venv/bin/celery
      dest: /usr/local/bin/celery_env
      remote_src: yes
      owner: ec2-user
      group: ec2-user
      mode: '0777'

- name: Reload systemd manager configuration
  ansible.builtin.systemd:
    daemon_reload: yes

- name: Start celery service
  ansible.builtin.systemd:
    name: celery
    state: started

- name: Enable celery service to start at boot
  ansible.builtin.systemd:
    name: celery
    enabled: yes 

- name: restart celery service
  ansible.builtin.systemd:
    name: celery
    state: restarted

# - name: Stop celery service
#   ansible.builtin.systemd:
#     name: celery
#     state: stopped
